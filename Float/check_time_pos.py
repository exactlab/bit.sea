import argparse
def argument():
    parser = argparse.ArgumentParser(description = '''
    Performs a check on time, rejecting some float profiles.
    Generates a Float_Index.txt file, actually used by all the scripts (by means of Float_Selector() method.
    Prints something on stdout, useful to communicate with LOV team.
    ''', formatter_class=argparse.RawTextHelpFormatter)


    parser.add_argument(   '--inputfile',"-i",
                                type = str,
                                required = False,
                                default = "/gss/gss_work/DRES_OGS_BiGe/Observations/TIME_RAW_DATA/ONLINE/FLOAT_LOVBIO/Float_Index.0.txt",
                                help = 'file generated by dump_index.py')
    parser.add_argument(   '--outfile',"-o",
                                type = str,
                                required = False,
                                default = "/gss/gss_work/DRES_OGS_BiGe/Observations/TIME_RAW_DATA/ONLINE/FLOAT_LOVBIO/Float_Index.txt",
                                help = 'file used by Float_Selector')
    parser.add_argument(   '--erase',"-e",
                                dest = 'erase',
                                default = "none",
                                action = 'store_true',
                                help = 'deletes original files')
    return parser.parse_args()

args = argument()

from instruments import lovbio_float
import datetime
import numpy as np
import os

mydtype= np.dtype([
          ('file_name','S200'),
          ('lat',np.float), # not np.float32, it performs a minor change
          ('lon',np.float),
          ('time','S17'),
          ('parameters','S200')] )


INDEX_FILE=np.loadtxt(args.inputfile,dtype=mydtype, delimiter=",",ndmin=1)
nFiles=INDEX_FILE.size

PROFILE_LIST = []
for iFile in range(nFiles):
    timestr          = INDEX_FILE['time'][iFile]
    lon              = INDEX_FILE['lon' ][iFile]
    lat              = INDEX_FILE['lat' ][iFile]
    filename         = INDEX_FILE['file_name'][iFile]
    available_params = INDEX_FILE['parameters'][iFile]
    float_time = datetime.datetime.strptime(timestr,'%Y%m%d-%H:%M:%S')
    thefloat = lovbio_float.BioFloat(lon,lat,float_time,filename,available_params)
    PROFILE_LIST.append(lovbio_float.BioFloatProfile(float_time,lon,lat, thefloat,available_params))
    


REMOVING_LIST=[]
WMOS=lovbio_float.get_wmo_list(PROFILE_LIST)


for wmo in WMOS:
    
    Profile_list = lovbio_float.filter_by_wmo(PROFILE_LIST, wmo)
    #first=Profile_list[0]
    #d=datetime.datetime(firsrt.time)
    
    TIMELIST=[p.time for p in Profile_list]
    nProfiles = len(Profile_list)
    for ip in range(1,nProfiles):
        if TIMELIST[ip] <= TIMELIST[ip-1]:
            print "\nPROBLEM in ", wmo, ip
            REMOVING_LIST.append(Profile_list[ip]._my_float.filename)
            for k in range(-1,2):
                IP = ip+k
                if IP > nProfiles-1 : continue
                print IP, Profile_list[IP]._my_float.filename, TIMELIST[IP]


good = np.ones((nFiles),np.bool)
LINES=[]
for iFile in range(nFiles):
    if INDEX_FILE['file_name'][iFile] in REMOVING_LIST: 
        good[iFile]=False

np.savetxt(args.outfile, INDEX_FILE[good], fmt="%s,%f,%f,%s,%s")

if args.erase:
    for filename in REMOVING_LIST:
        command = "rm -f  " + filename
        print command
        os.system(command)


    
